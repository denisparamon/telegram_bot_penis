<?php

namespace PenisBot\Handlers;

use PenisBot\Domain\Actions\Member\GetMembersAction;
use PenisBot\Domain\Actions\Penis\GetPenisAction;
use PenisBot\Domain\Actions\Penis\SpinPenisSizeAction;
use PenisBot\Domain\Actions\Penis\UpdatePenisSizeAction;
use PenisBot\Domain\Actions\Pidor\GetLastPidorAction;
use PenisBot\Domain\Actions\Pidor\IncrementCountPidorAction;
use PenisBot\Domain\Actions\Pidor\NeedSkipSpinPidorAction;
use PenisBot\Domain\Actions\Pidor\SpinPidorAction;
use PenisBot\Domain\Actions\Pidor\SpinSetPidorAction;
use PenisBot\Locker;
use Telegram\Bot\Actions;
use Telegram\Bot\Api as TelegramAPI;
use Telegram\Bot\Objects\Update;

class PidorCommand implements HandlerInterface
{
    public const COMMAND_NAME = '/pidor';

    private NotFoundPenis $notFoundPenis;
    private Error $error;
    private GetMembersAction $getMembers;
    private NeedSkipSpinPidorAction $needSkipSpinPidor;
    private GetLastPidorAction $getLastPidor;
    private SpinPidorAction $spinPidor;
    private SpinPenisSizeAction $spinPenisSize;
    private GetPenisAction $getPenis;
    private UpdatePenisSizeAction $updatePenisSize;
    private SpinSetPidorAction $spinSetPidor;
    private IncrementCountPidorAction $incrementCountPidor;
    private Locker $locker;

    public function __construct(
        NotFoundPenis $notFoundPenis,
        Error $error,
        GetMembersAction $getMembers,
        NeedSkipSpinPidorAction $needSkipSpinPidor,
        GetLastPidorAction $getLastPidor,
        SpinPidorAction $spinPidor,
        SpinPenisSizeAction $spinPenisSize,
        GetPenisAction $getPenis,
        UpdatePenisSizeAction $updatePenisSize,
        SpinSetPidorAction $spinSetPidor,
        IncrementCountPidorAction $incrementCountPidor,
        Locker $locker
    )
    {
        $this->notFoundPenis = $notFoundPenis;
        $this->error = $error;
        $this->getMembers = $getMembers;
        $this->needSkipSpinPidor = $needSkipSpinPidor;
        $this->getLastPidor = $getLastPidor;
        $this->spinPidor = $spinPidor;
        $this->spinPenisSize = $spinPenisSize;
        $this->getPenis = $getPenis;
        $this->updatePenisSize = $updatePenisSize;
        $this->spinSetPidor = $spinSetPidor;
        $this->incrementCountPidor = $incrementCountPidor;
        $this->locker = $locker;
    }

    public function process(TelegramAPI $telegram, Update $update): void
    {
        $chatId = $update->getMessage()->getChat()->getId();
        $lockKey = 'pidor' . $chatId;

        if ($this->locker->issetLock($lockKey)) {
            return;
        }

        $this->locker->lock($lockKey);

        if ($this->needSkipSpinPidor->needSkipSpinPidor($chatId)) {
            $lastPidor = $this->getLastPidor->getLastPidor($chatId);

            $telegram->sendMessage([
                'chat_id' => $chatId,
                'disable_notification' => true,
                'text' => sprintf(
                '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∏–¥–æ—Ä–æ–≤ —Ö–≤–∞—Ç–∏—Ç. –ï—Å–ª–∏ —á—ë –ø–∏–¥–æ—Ä —Å–µ–≥–æ–¥–Ω—è @%s',
                    $lastPidor->getUsername(),
                ),
            ]);

            return;
        }

        $members = $this->getMembers->getMembersWithPenisForSpin($chatId);

        if (count($members) === 0) {
            $this->notFoundPenis->process($telegram, $update);
            return;
        }

        $member = $this->spinPidor->spinPidor($members);
        $penis = $this->getPenis->getPenisByMember($member);

        if ($penis === null) {
            $this->error->process($telegram, $update);
            return;
        }

        $spinPenisResult = $this->spinPenisSize->spinDiffPenisSize($penis);

        if (!$spinPenisResult->isDiff()) {
            $this->error->process($telegram, $update);
            return;
        }

        $spinSetPidorResult = $this->spinSetPidor->spinSetPidor();

        if ($spinSetPidorResult->isSecret() === false) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π
            $penis = $this->updatePenisSize->updatePenisSize($penis, $spinPenisResult, false);

            $this->incrementCountPidor->incrementCountPidor($member);
        }

        $set = [];

        if ($spinSetPidorResult->isFirst()) {
            $set = $this->firstSet($chatId);
        }
        if ($spinSetPidorResult->isSecond()) {
            $set = $this->secondSet($chatId);
        }
        if ($spinSetPidorResult->isThird()) {
            $set = $this->thirdSet($chatId);
        }
        if ($spinSetPidorResult->isSecret()) {
            $set = $this->ernestSet($chatId);
        }

        foreach ($set as $message) {
            if (isset($message['end']) && $message['end'] === true) {
                $message['text'] = sprintf(
                    $message['text'],
                    $member->getUsername(),
                    $spinPenisResult->getDiffSize(),
                    $penis->getSize()
                );

                $telegram->sendMessage($message);
            } else {
                $telegram->sendMessage($message);

                $telegram->sendChatAction([
                    'chat_id' => $chatId,
                    'action' => Actions::TYPING,
                ]);
                sleep(1);
            }
        }

        $this->locker->unlock($lockKey);
    }

    private function firstSet(int $chatId): array
    {
        return [
            [
                'chat_id' => $chatId,
                'text' => '–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é —Å–µ—Ä–≤–∏—Å –ø–æ –ø–æ–∏—Å–∫—É –ø–∏–¥–æ—Ä–∞—Å–æ–≤ ‚úàÔ∏è',
            ],
            [
                'chat_id' => $chatId,
                'text' => 'ping global.pidoras.com...',
            ],
            [
                'chat_id' => $chatId,
                'text' => 'pong 64 bytes from zebal pingovat\'...',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ üîé',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–û —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–æ—Å—å...',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ê–≥–∞ –ø–∏–¥–æ—Ä –¥–Ω—è @%s! –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –∫–æ—Ä–æ—á–µ –Ω–∞ %s —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %s —Å–º.',
                'end' => true,
            ],
        ];
    }

    private function secondSet(int $chatId): array
    {
        return [
            [
                'chat_id' => $chatId,
                'text' => '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µÔ∏è üïµÔ∏è‚Äç‚ôÇÔ∏è',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –∞–Ω—Ç–∏–ø–∏–¥–æ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É üì©',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–£—Ç–æ—á–Ω—è—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ üìç',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ò–∑–±–∞–≤–ª—è—é—Å—å –æ—Ç —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π ü•∑',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ü–æ–ø–∞–≤—Å—è –ø–∏–¥–æ—Ä. –ú–æ–π –ø–æ–ø—É @%s. –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –∫–æ—Ä–æ—á–µ –Ω–∞ %s —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %s —Å–º.',
                'end' => true,
            ],
        ];
    }

    private function thirdSet(int $chatId): array
    {
        return [
            [
                'chat_id' => $chatId,
                'text' => '–°—á–∞ –ø–æ–∏—â—É.',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –∑–∞–π–¥—É –≤ –±–∞—Ä üç∫',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–¢–µ–ø–µ—Ä—å –ø–æ–≥–Ω–∞–ª –≤ –∫–ª—É–± üéâ',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–û–æ–æ —Ç—É—Ç –µ—â—ë –∫–∞–∑–∏–Ω–æ –µ—Å—Ç—å üé∞',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–Å–±–∞–Ω—ã–π —Ä–æ—Ç —ç—Ç–æ–≥–æ –∫–∞–∑–∏–Ω–æ... –ê? –ß—Ç–æ? –ü–∏–¥–æ—Ä–∞ –Ω–∞–¥–æ –Ω–∞–π—Ç–∏? –°—á–∞.',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ü—É—Å—Ç—å –ø–∏–¥–æ—Ä–æ–º –±—É–¥–µ—Ç @%s. –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –∫–æ—Ä–æ—á–µ –Ω–∞ %s —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %s —Å–º.',
                'end' => true,
            ],
        ];
    }

    private function ernestSet(int $chatId): array
    {
        return [
            [
                'chat_id' => $chatId,
                'text' => '–ë–ª—è—è—è –æ–ø—è—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å...',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ù—É –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å —Ç—É—Ç –µ—Å—Ç—å.',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–¢—É—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ —á—Ç–æ –ï—Ä–Ω–µ—Å—Ç –ø–∏–¥–æ—Ä.',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ù—É –ª–∞–¥–Ω–æ –ª–∞–¥–Ω–æ. –°—á–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–∏—â—É.',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª. –ö–∞—Ä–æ—á –≠—Ä–Ω–µ—Å—Ç –ø–∏–¥–æ—Ä. –û—Ç—ä–µ–±–∏—Ç–µ—Å—å –æ—Ç –º–µ–Ω—è üñï',
            ],
        ];
    }
}
