<?php

namespace PenisBot\Handlers;

use PenisBot\Domain\Actions\Gigachad\GetLastGigachadAction;
use PenisBot\Domain\Actions\Gigachad\IncrementCountGigachadAction;
use PenisBot\Domain\Actions\Gigachad\NeedSkipSpinGigachadAction;
use PenisBot\Domain\Actions\Gigachad\SpinGigachadAction;
use PenisBot\Domain\Actions\Gigachad\SpinSetGigachadAction;
use PenisBot\Domain\Actions\Member\GetMembersAction;
use PenisBot\Domain\Actions\Penis\GetPenisAction;
use PenisBot\Domain\Actions\Penis\SpinPenisSizeAction;
use PenisBot\Domain\Actions\Penis\UpdatePenisSizeAction;
use PenisBot\Locker;
use Telegram\Bot\Actions;
use Telegram\Bot\Api as TelegramAPI;
use Telegram\Bot\Objects\Update;

class GigachadCommand implements HandlerInterface
{
    public const COMMAND_NAME = '/gigachad';

    private NotFoundPenis $notFoundPenis;
    private Error $error;
    private GetMembersAction $getMembers;
    private NeedSkipSpinGigachadAction $needSkipSpinGigachad;
    private GetLastGigachadAction $getLastGigachad;
    private SpinGigachadAction $spinGigachad;
    private SpinPenisSizeAction $spinPenisSize;
    private GetPenisAction $getPenis;
    private UpdatePenisSizeAction $updatePenisSize;
    private SpinSetGigachadAction $spinSetGigachad;
    private IncrementCountGigachadAction $incrementCountGigachad;
    private Locker $locker;

    public function __construct(
        NotFoundPenis $notFoundPenis,
        Error $error,
        GetMembersAction $getMembers,
        NeedSkipSpinGigachadAction $needSkipSpinGigachad,
        GetLastGigachadAction $getLastGigachad,
        SpinGigachadAction $spinGigachad,
        SpinPenisSizeAction $spinPenisSize,
        GetPenisAction $getPenis,
        UpdatePenisSizeAction $updatePenisSize,
        SpinSetGigachadAction $spinSetGigachad,
        IncrementCountGigachadAction $incrementCountGigachad,
        Locker $locker
    )
    {
        $this->notFoundPenis = $notFoundPenis;
        $this->error = $error;
        $this->getMembers = $getMembers;
        $this->needSkipSpinGigachad = $needSkipSpinGigachad;
        $this->getLastGigachad = $getLastGigachad;
        $this->spinGigachad = $spinGigachad;
        $this->spinPenisSize = $spinPenisSize;
        $this->getPenis = $getPenis;
        $this->updatePenisSize = $updatePenisSize;
        $this->spinSetGigachad = $spinSetGigachad;
        $this->incrementCountGigachad = $incrementCountGigachad;
        $this->locker = $locker;
    }

    public function process(TelegramAPI $telegram, Update $update): void
    {
        $chatId = $update->getMessage()->getChat()->getId();
        $lockKey = 'gigachad' . $chatId;

        if ($this->locker->issetLock($lockKey)) {
            return;
        }

        $this->locker->lock($lockKey);

        if ($this->needSkipSpinGigachad->needSkipSpinGigachad($chatId)) {
            $lastGigachad = $this->getLastGigachad->getLastGigachad($chatId);

            $telegram->sendMessage([
                'chat_id' => $chatId,
                'disable_notification' => true,
                'text' => sprintf(
                '–°–µ–≥–æ–¥–Ω—è –∞–ª—å—Ñ–∞ —Å–∞–º–µ—Ü @%s –∏ –Ω–∏–∫—Ç–æ –µ–≥–æ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç!',
                    $lastGigachad->getUsername(),
                ),
            ]);

            return;
        }

        $members = $this->getMembers->getMembersWithPenisForSpin($chatId);

        if (count($members) === 0) {
            $this->notFoundPenis->process($telegram, $update);
            return;
        }


        $member = $this->spinGigachad->spinGigachad($members);
        $penis = $this->getPenis->getPenisByMember($member);

        if ($penis === null) {
            $this->error->process($telegram, $update);
            return;
        }

        $spinPenisResult = $this->spinPenisSize->spinAddPenisSize($penis);

        if (!$spinPenisResult->isAdd()) {
            $this->error->process($telegram, $update);
            return;
        }

        $spinSetGigachadResult = $this->spinSetGigachad->spinSetGigachad();

        if ($spinSetGigachadResult->isSecret() === false) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π
            $this->incrementCountGigachad->incrementCountGigachad($member);

            $penis = $this->updatePenisSize->updatePenisSize($penis, $spinPenisResult, false);
        }

        $set = [];

        if ($spinSetGigachadResult->isFirst()) {
            $set = $this->firstSet($chatId);
        }
        if ($spinSetGigachadResult->isSecond()) {
            $set = $this->secondSet($chatId);
        }
        if ($spinSetGigachadResult->isThird()) {
            $set = $this->thirdSet($chatId);
        }
        if ($spinSetGigachadResult->isSecret()) {
            $set = $this->secretSet($chatId);
        }

        foreach ($set as $message) {
            if (isset($message['end']) && $message['end'] === true) {
                $message['text'] = sprintf(
                    $message['text'],
                    $member->getUsername(),
                    $spinPenisResult->getDiffSize(),
                    $penis->getSize()
                );

                $telegram->sendMessage($message);
            } else {
                $telegram->sendMessage($message);

                $telegram->sendChatAction([
                    'chat_id' => $chatId,
                    'action' => Actions::TYPING,
                ]);
                sleep(1);
            }
        }

        $this->locker->unlock($lockKey);
    }

    private function firstSet(int $chatId): array
    {
        return [
            [
                'chat_id' => $chatId,
                'text' => '–ñ–∏ –µ—Å—Ç—å! –°—ç–π—á–∞—Å –ø–æ–∏—â–µ–º –∫—Ä–∞–∑–∞–≤—á–∏–∫–∞ ‚òùÔ∏è',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–≠—É! –£ –∫–æ–≥–æ –∫–∞–º—Ä–∏ 3.5? üèé',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ú–æ–∂–µ—Ç —Ö–æ—Ç—è–±—ã –ø—Ä–∏–æ—Ä–∞ –µ—Å—Ç—å? üöó',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ü–æ—Ö—É–π. –°—ç–π—á–∞—Å —É –ø–∞—Ü–∞–Ω–æ–≤ –ø–æ—Å–ø—Ä–∞—à–∏–≤–∞—é –∫—Ç–æ? —á—Ç–æ? –∫–∞–∫?',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–í–æ—É –≤–æ—É –≤–æ—É –ø–∞–ø—Ä–∏–≤–µ—Ç—Å–≤—É–π—Ç–µ —Ö–∞—Å–∞–Ω—á–∏–∫–∞ @%s!üî• –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ %s —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %s —Å–º.',
                'end' => true,
            ],
        ];
    }

    private function secondSet(int $chatId): array
    {
        return [
            [
                'chat_id' => $chatId,
                'text' => '–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∞–ª—å—Ñ–∞ —Å–∞–º–µ—Ü? ü§®',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–≠—Ç–æ—Ç –≤ —Ü–∏—Ä–∫–µ –≤—ã—Å—Ç—É–ø–∞–µ—Ç... üé™',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–¢–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ –º–æ–∂–µ—Ç. –¢—É–ø–æ–π —Å—Å—É–∫–∞.',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ê —É —ç—Ç–æ–≥–æ —Ö—É—è –¥–∞–∂–µ –Ω–µ—Ç üî´',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ê –≤–æ—Ç –∏ –æ–Ω –Ω–∞—à –≤–æ–ª—á–∞—Ä–∞ –∞–ª—å—Ñ–∞ —Å–∞–º–µ—Ü @%s!üê∫üî• –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ %s —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %s —Å–º.',
                'end' => true,
            ],
        ];
    }

    private function thirdSet(int $chatId): array
    {
        return [
            [
                'chat_id' => $chatId,
                'text' => '–•–º–º... –ö—Ç–æ –∂–µ —Å–µ–≥–æ–¥–Ω—è –≥–∏–≥–∞—á–∞–¥?',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ü—Ä–æ–≤–æ–∂—É —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é üì∏',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–Ω–∏–º–∫–∏ üìÄ',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üî¨',
            ],
            [
                'chat_id' => $chatId,
                'text' => '–°–∏–Ω—Ç–µ–∑–∏—Ä—É—é –î–ù–ö üß¨',
            ],
            [
                'chat_id' => $chatId,
                'text' => '@%s –±–ª—è —Ä–µ–∞–ª—å–Ω–æ –≥–∏–≥–∞—á–∞–¥. –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ %s —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %s —Å–º.',
                'end' => true,
            ],
        ];
    }

    private function secretSet(int $chatId): array
    {
        return [
            [
                'chat_id' => $chatId,
                'text' => '–Ø –±–ª—è—Ç—å —Ç—É—Ç –∞–ª—å—Ñ–∞! +10 000 –∫ –º–æ–µ–º—É —Ö—É—é! –¢–∞–∫ —á—Ç–æ –ø–æ—à–ª–∏ –Ω–∞—Ö—É–π üëø',
            ],
        ];
    }
}
